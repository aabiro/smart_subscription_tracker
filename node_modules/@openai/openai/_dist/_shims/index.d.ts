export type Agent = any;
type _RequestInfo = RequestInfo;
export { type _RequestInfo as RequestInfo };
type _RequestInit = RequestInit;
export { type _RequestInit as RequestInit };
declare const _Response: any;
type _Response = Response;
export { _Response as Response };
type _HeadersInit = HeadersInit;
export { type _HeadersInit as HeadersInit };
type EndingType = 'native' | 'transparent';
export interface BlobPropertyBag {
  endings?: EndingType;
  type?: string;
}
export interface FilePropertyBag extends BlobPropertyBag {
  lastModified?: number;
}
export declare function fileFromPath(): void;
export declare class Readable {
  readable: boolean;
  readonly readableEnded: boolean;
  readonly readableFlowing: boolean | null;
  readonly readableHighWaterMark: number;
  readonly readableLength: number;
  readonly readableObjectMode: boolean;
  destroyed: boolean;
  read(size?: number): any;
  pause(): this;
  resume(): this;
  isPaused(): boolean;
  destroy(error?: Error): this;
}
export declare class FsReadStream extends Readable {
  path: {
  };
}
declare const _ReadableStream: any;
type _ReadableStream = ReadableStream;
export { _ReadableStream as ReadableStream };
//# sourceMappingURL=index.d.ts.map